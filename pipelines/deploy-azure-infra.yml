trigger:
  branches:
    include:
      - main

variables:
  hubSubscription: "Azure sub1"
  spoke1Subscription: "Azure Sub-A"
  spoke2Subscription: "Azure Sub-B"
  location: "northeurope"
  keyVaultName: "sharedServicesKV-Mohsen"
  wifServiceConnection: "WIF-HubSpokes-Root"
  dnsAdminUser: "dnsadmin"

stages:

# ==============================
# Stage 1: Deploy Hub / Shared Services
# ==============================
- stage: SharedServices
  displayName: 'Deploy Shared Services (Hub)'
  jobs:
  - job: DeploySharedServices
    displayName: 'Deploy Hub Resources'
    pool:
      name: 'IaC-agent-pool'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Shared Services Bicep'
      inputs:
        azureSubscription: '$(wifServiceConnection)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az account set --subscription "$(hubSubscription)"
          az group create --name rg-shared-services --location $(location)
          $output = az deployment group create `
            --resource-group rg-shared-services `
            --template-file infra/stacks/shared-services/main.bicep `
            --parameters "@infra/stacks/shared-services/main.json" `
            --output json
          Write-Host "Shared Services Deployment Output: $output"
          $addsSubnetAId = ($output | ConvertFrom-Json).properties.outputs.addsSubnetAId.value
          $addsSubnetBId = ($output | ConvertFrom-Json).properties.outputs.addsSubnetBId.value
          $keyVaultId = ($output | ConvertFrom-Json).properties.outputs.keyVaultId.value
          Write-Host "##vso[task.setvariable variable=addsSubnetAId;isOutput=true]$addsSubnetAId"
          Write-Host "##vso[task.setvariable variable=addsSubnetBId;isOutput=true]$addsSubnetBId"
          Write-Host "##vso[task.setvariable variable=keyVaultId;isOutput=true]$keyVaultId"

# ==============================
# Stage 1.5: Manual Approval
# ==============================
- stage: ManualApproval
  displayName: 'Manual Approval Before Spokes'
  dependsOn: SharedServices
  jobs:
  - job: WaitForApproval
    displayName: 'Wait for Manual Approval'
    pool: server
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: 'boxclean@gmail.com'
        instructions: 'Please review the Shared Services deployment before proceeding to Spoke deployments.'
        timeout: '0'

# ==============================
# Stage 2: Deploy AD DS VMs to Hub
# ==============================
- stage: DeployADDS
  displayName: 'Deploy AD DS VMs to Hub'
  dependsOn: ManualApproval
  jobs:
  - job: DeployADDSVMs
    displayName: 'Deploy Domain Controller VMs'
    pool:
      name: 'IaC-agent-pool'
    variables:
      addsSubnetAId: $[stageDependencies.SharedServices.DeploySharedServices.outputs['addsSubnetAId']]
      addsSubnetBId: $[stageDependencies.SharedServices.DeploySharedServices.outputs['addsSubnetBId']]
      keyVaultId: $[stageDependencies.SharedServices.DeploySharedServices.outputs['keyVaultId']]
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy AD DS VMs Bicep'
      inputs:
        azureSubscription: '$(wifServiceConnection)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az account set --subscription "$(hubSubscription)"
          $addsVmAdminUsername = "$(dnsAdminUser)"
          az deployment group create `
            --resource-group rg-shared-services `
            --template-file infra/stacks/shared-services/adds-vms.bicep `
            --parameters location="$(location)" `
                         addsVmAdminUsername="$addsVmAdminUsername" `
                         keyVaultId="$(keyVaultId)" `
                         addsSubnetAId="$(addsSubnetAId)" `
                         addsSubnetBId="$(addsSubnetBId)"

# ==============================
# Stage 3: Deploy Spoke 1 / Company A
# ==============================
- stage: CompanyA
  displayName: 'Deploy Company A (Spoke 1)'
  dependsOn: DeployADDS
  jobs:
  - job: DeployCompanyA
    displayName: 'Deploy Company A Resources'
    pool:
      name: 'IaC-agent-pool'
    variables:
      dnsServerIp: $[stageDependencies.SharedServices.DeploySharedServices.outputs['dnsServerIp']]
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Company A Bicep'
      inputs:
        azureSubscription: '$(wifServiceConnection)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az account set --subscription "$(spoke1Subscription)"
          az group create --name rg-company-a --location $(location)
          $output = az deployment group create `
            --resource-group rg-company-a `
            --template-file infra/stacks/company-a/main.bicep `
            --parameters "@infra/stacks/company-a/company-a.parameters.json" `
            --output json
          Write-Host "Company A Deployment Output: $output"

# ==============================
# Stage 4: Deploy Spoke 2 / Company B
# ==============================
- stage: CompanyB
  displayName: 'Deploy Company B (Spoke 2)'
  dependsOn: DeployADDS
  jobs:
  - job: DeployCompanyB
    displayName: 'Deploy Company B Resources'
    pool:
      name: 'IaC-agent-pool'
    variables:
      dnsServerIp: $[stageDependencies.SharedServices.DeploySharedServices.outputs['dnsServerIp']]
    steps:
    - task: AzureKeyVault@2
      displayName: 'Fetch CompanyBAdminPassword from Key Vault'
      inputs:
        azureSubscription: '$(wifServiceConnection)'
        KeyVaultName: '$(keyVaultName)'
        SecretsFilter: 'CompanyBAdminPassword'
        RunAsPreJob: true

    - task: AzureCLI@2
      displayName: 'Deploy Company B Bicep'
      inputs:
        azureSubscription: '$(wifServiceConnection)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az account set --subscription "$(spoke2Subscription)"
          az group create --name rg-company-b --location $(location)
          $output = az deployment group create `
            --resource-group rg-company-b `
            --template-file infra/stacks/company-b/main.bicep `
            --parameters "@infra/stacks/company-b/company-b.parameters.json" `
            --output json
          Write-Host "Company B Deployment Output: $output"
