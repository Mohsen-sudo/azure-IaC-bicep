trigger:
  branches:
    include:
      - main

variables:
  hubSubscription: "Azure sub1"
  spoke1Subscription: "Azure Sub-A"
  spoke2Subscription: "Azure Sub-B"
  location: "northeurope"
  keyVaultName: "sharedServicesKV-Mohsen"
  wifServiceConnection: "WIF-HubSpokes-Root"
  dnsAdminUser: "dnsadmin"

stages:

# ==============================
# Stage 1: Deploy Hub / Shared Services
# ==============================
- stage: SharedServices
  displayName: 'Deploy Shared Services (Hub)'
  jobs:
  - job: DeploySharedServices
    displayName: 'Deploy Hub Resources'
    pool:
      name: 'IaC-agent-pool'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Shared Services Bicep'
      inputs:
        azureSubscription: '$(wifServiceConnection)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az account set --subscription "$(hubSubscription)"
          az group create --name rg-shared-services --location $(location)
          $output = az deployment group create `
            --resource-group rg-shared-services `
            --template-file infra/stacks/shared-services/main.bicep `
            --parameters "@infra/stacks/shared-services/main.json" `
            --output json
          Write-Host "Shared Services Deployment Output: $output"
          $addsSubnetAId = ($output | ConvertFrom-Json).properties.outputs.addsSubnetAId.value
          $addsSubnetBId = ($output | ConvertFrom-Json).properties.outputs.addsSubnetBId.value
          $keyVaultId = ($output | ConvertFrom-Json).properties.outputs.keyVaultId.value
          Write-Host "##vso[task.setvariable variable=addsSubnetAId;isOutput=true]$addsSubnetAId"
          Write-Host "##vso[task.setvariable variable=addsSubnetBId;isOutput=true]$addsSubnetBId"
          Write-Host "##vso[task.setvariable variable=keyVaultId;isOutput=true]$keyVaultId"

# ==============================
# Stage 1.5: Manual Approval
# ==============================
- stage: ManualApproval
  displayName: 'Manual Approval Before Spokes'
  dependsOn: SharedServices
  jobs:
  - job: WaitForApproval
    displayName: 'Wait for Manual Approval'
    pool: server
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: 'boxclean@gmail.com'
        instructions: 'Please review the Shared Services deployment before proceeding to Spoke deployments.'
        timeout: '0'

# ==============================
# Stage 2: Deploy AD DS VMs to Hub
# ==============================
- stage: DeployADDS
  displayName: 'Deploy AD DS VMs to Hub'
  dependsOn: ManualApproval
  jobs:
  - job: DeployADDSVMs
    displayName: 'Deploy Domain Controller VMs'
    pool:
      name: 'IaC-agent-pool'
    variables:
      addsSubnetAId: $[stageDependencies.SharedServices.DeploySharedServices.outputs['addsSubnetAId']]
      addsSubnetBId: $[stageDependencies.SharedServices.DeploySharedServices.outputs['addsSubnetBId']]
      keyVaultId: $[stageDependencies.SharedServices.DeploySharedServices.outputs['keyVaultId']]
    steps:
    - powershell: |
        Write-Host "DEBUG: addsSubnetAId='$(addsSubnetAId)'"
        Write-Host "DEBUG: addsSubnetBId='$(addsSubnetBId)'"
        Write-Host "DEBUG: keyVaultId='$(keyVaultId)'"
        # Fail fast if subnet IDs are missing
        if ([string]::IsNullOrWhiteSpace("$(addsSubnetAId)") -or [string]::IsNullOrWhiteSpace("$(addsSubnetBId)")) {
          Write-Error "ERROR: One or both subnet IDs are empty! Check outputs from SharedServices stage."
          exit 1
        }
      displayName: 'Debug: Print subnet and Key Vault variable values'
    - task: AzureCLI@2
      displayName: 'Deploy AD DS VMs Bicep'
      inputs:
        azureSubscription: '$(wifServiceConnection)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az account set --subscription "$(hubSubscription)"
          $addsVmAdminUsername = "$(dnsAdminUser)"
          az deployment group create `
            --resource-group rg-shared-services `
            --template-file infra/stacks/shared-services/adds-vms.bicep `
            --parameters location="$(location)" `
                         addsVmAdminUsername="$addsVmAdminUsername" `
                         addsSubnetAId="$(addsSubnetAId)" `
                         addsSubnetBId="$(addsSubnetBId)" `
                         adminPassword='{"reference":{"keyVault":{"id":"$(keyVaultId)"},"secretName":"addsVmAdminPassword"}}'

# ... (rest of your pipeline unchanged)
