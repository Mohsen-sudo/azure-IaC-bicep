trigger:
  branches:
    include:
      - main

variables:
  hubSubscription: "Azure sub1"
  spoke1Subscription: "Azure Sub-A"
  spoke2Subscription: "Azure Sub-B"
  location: "northeurope"
  keyVaultName: "sharedServicesKV-Mohsen"
  wifServiceConnection: "WIF-HubSpokes-Root"
  AZURE_SERVICE_CONNECTION: "WIF-HubSpokes-Root"  # Add this if needed for ARM task
  domainName: "contoso.local"
  domainSecurityGroup: "AADDSAdmins"

stages:
  - stage: SharedServices
    displayName: 'Deploy Shared Services (Hub)'
    jobs:
      - job: DeploySharedServices
        displayName: 'Deploy Hub Resources'
        pool:
          name: 'IaC-agent-pool'
        steps:
          - task: AzureCLI@2
            displayName: 'Deploy Shared Services Bicep'
            inputs:
              azureSubscription: '$(wifServiceConnection)'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az account set --subscription "$(hubSubscription)"
                az group create --name rg-shared-services --location $(location)
                az deployment group create `
                  --resource-group rg-shared-services `
                  --template-file infra/stacks/shared-services/main.bicep `
                  --parameters "@infra/stacks/shared-services/main.json" `
                  --only-show-errors `
                  --output none

  - stage: ManualApproval
    displayName: 'Manual Approval Before Spokes'
    dependsOn: SharedServices
    jobs:
      - job: WaitForApproval
        displayName: 'Wait for Manual Approval'
        pool: server
        steps:
          - task: ManualValidation@0
            inputs:
              notifyUsers: 'boxclean@gmail.com'
              instructions: 'Please review the Shared Services deployment before proceeding to Spoke deployments.'
              timeout: '0'

  - stage: CompanyA
    displayName: 'Deploy Company A (Spoke 1)'
    dependsOn: ManualApproval
    jobs:
      - job: DeployCompanyA
        displayName: 'Deploy Company A Resources'
        pool:
          name: 'IaC-agent-pool'
        steps:
          # 1️⃣ Retrieve adminPassword from Key Vault using pipeline SP
          - task: AzureCLI@2
            displayName: 'Get adminPassword from Key Vault'
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                SECRET=$(az keyvault secret show --vault-name $(keyVaultName) --name adminPassword --query value -o tsv)
                echo "##vso[task.setvariable variable=adminPassword;isSecret=true]$SECRET"

          # 2️⃣ Deploy Company A Bicep with retrieved secret
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Deploy Company A Bicep (ARM Task)'
            inputs:
              deploymentScope: 'Subscription'
              azureResourceManagerConnection: '$(AZURE_SERVICE_CONNECTION)'
              subscriptionId: 'bc590447-877b-4cb2-9253-6d4aab175a22'
              location: 'northeurope'
              templateLocation: 'Linked artifact'
              csmFile: 'infra/stacks/company-a/main.bicep'
              csmParametersFile: 'infra/stacks/company-a/company-a.parameters.json'
              overrideParameters: '-adminPassword $(adminPassword)'
              deploymentMode: 'Incremental'

  - stage: CompanyB
    displayName: 'Deploy Company B (Spoke 2)'
    dependsOn: ManualApproval
    jobs:
      - job: DeployCompanyB
        displayName: 'Deploy Company B Resources'
        pool:
          name: 'IaC-agent-pool'
        steps:
          - task: AzureCLI@2
            displayName: 'Deploy Company B Bicep'
            inputs:
              azureSubscription: '$(wifServiceConnection)'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az account set --subscription "$(spoke2Subscription)"
                az group create --name rg-company-b --location $(location)
                az deployment group create `
                  --resource-group rg-company-b `
                  --template-file infra/stacks/company-b/main.bicep `
                  --parameters "@infra/stacks/company-b/company-b.parameters.json" `
                  --only-show-errors `
                  --output none
